{"version":3,"sources":["giphy.gif","logo.svg","components/layout/NavBar.js","components/pokemon/Pokemon.js","components/pokemon/PokemonCard.js","components/pokemon/Search.js","components/pokemon/PokemonList.js","components/layout/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","style","color","Pokemon","props","useState","pokemonIndex","setPokemonIndex","name","setName","useEffect","match","params","console","log","fetch","then","response","json","myJson","src","PokemonCard","url","setUrl","split","length","to","alt","Search","for","paddingRight","id","onChange","event","query","target","value","searchListNames","pokeListArray","map","el","filter","item","toLowerCase","search","someFunction","type","PokemonList","filteredNames","pokeApi","pokemon","setPokemon","filteredPoke","setfilteredPoke","results","pokeArray","key","includes","Dashboard","App","poke_logo","width","paddingBottom","paddingTop","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.17878e0e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/giphy.4a470171.gif\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nfunction NavBar()\n{\n    return(\n        <div>\n            <nav className=\"navbar navbar-expand-md navbar-dark bg-dark fixed\" style={{color:\"white\"}}>\n            Pokedex\n            </nav>\n        </div>\n    )\n}\n\nexport default NavBar;","import React, { useEffect, useState } from 'react';\n\nfunction Pokemon(props) {\n    const [pokemonIndex, setPokemonIndex] = useState('');\n    const [name, setName] = useState('');\n    const [imageUrl, setImageUrl] = useState('');\n    useEffect(() => {\n        setPokemonIndex(props.match.params.pokemonIndex);\n        console.log(pokemonIndex);   \n    }, [])\n    fetch(\"https://pokeapi.co/api/v2/pokemon/\" + pokemonIndex).then(function (response) { return response.json() }).then\n    (function (myJson) {\n        console.log(pokemonIndex)\n        console.log(myJson.name);\n        setName(myJson.name);\n    })    \n    return (\n        <div><h1>{name}</h1>\n        <img src={\"https://github.com/PokeAPI/sprites/blob/master/sprites/pokemon/\" + pokemonIndex + \".png?raw=true\"}></img>\n        </div>\n    )\n}\n\nexport default Pokemon;","import React, {useState, useEffect} from 'react';\nimport {Link} from 'react-router-dom';\nimport Pokemon from './Pokemon';\nfunction PokemonCard(props)\n{\nconst [url, setUrl] = useState('');\n    useEffect(() => {\n    setUrl( \"https://github.com/PokeAPI/sprites/blob/master/sprites/pokemon/\" + props.url.split('/')[props.url.split('/').length - 2 ] + \".png?raw=true\");\n   \n    }, [])    \n    return(\n       \n        <div className=\"col-md-3 col-sm-6 mb-5\">\n    <Link to = {`pokemon/`+ props.url.split('/')[props.url.split('/').length - 2 ]}> \n      \n        <div className=\"card\">\n        <div className=\"card-header\">\n        <h3>{props.name}</h3>\n        </div>\n        <div className=\"card-body mx-auto\">\n        <img src= {url} alt =\"\"/>\n        </div>\n       </div>\n        </Link>\n   \n        </div>\n        )    \n}\n\nexport default PokemonCard;","import React, {useState, useEffect} from 'react';\n\nfunction Search(props)\n{\n\n//const [query, SetQuery] = useState('');\n\nlet handleSearch = (event) => {\nlet query = event.target.value; \nconsole.log(query);\nlet searchList = props.pokeListArray;\nlet searchListNames = searchList.map ((el) => el.name)\nsearchListNames = searchListNames.filter(function(item){ return item.toLowerCase().search(query.toLowerCase()) !== -1 })\nconsole.log(searchListNames);\n \nprops.someFunction (searchListNames)\n{\n    return searchListNames;\n}\n}\n\n\n\n\nuseEffect(() => {\n\n   \n  }, [])\n    return(\n        <div>\n      <label for=\"search_box\" style={{paddingRight:\"25px\"}}>Search for a Pokemon</label> <input id=\"search_box\" onChange={handleSearch} type=\"text\"/>\n\n        </div>\n    )\n}\n\nexport default Search;","import React, { useState, useEffect } from 'react';\nimport PokemonCard from './PokemonCard.js';\nimport Search from './Search';\nfunction PokemonList() {\n    var filteredNames = [];\n    const [pokeApi, setPokeApi] = useState('https://pokeapi.co/api/v2/pokemon/');\n    const [pokemon, setPokemon] = useState([]);\n    const [filteredPoke, setfilteredPoke] = useState([]);\n    \n    const someFunction = (params) => {\n        console.log(params);\n        filteredNames = params;\n        console.log(filteredNames);\n         setfilteredPoke ( pokemon.filter(function(item) { return filteredNames.includes(item.name)}) );\n\n        console.log(filteredPoke);\n    };\n\n    useEffect(() => {\n\n        fetch(pokeApi).then(function (response) { return response.json() }).then\n            (function (myJson) {\n                console.log(myJson.results);\n                setPokemon(myJson.results);\n                setfilteredPoke(myJson.results);\n            })\n\n\n    }, [])\n  \n\n    const pokeArray = filteredPoke.map((el) => <PokemonCard name={el.name} url={el.url} key={el.name}></PokemonCard>);\n    return (\n        <div className=\"container\">\n          \n            <Search pokeListArray={pokemon} someFunction={someFunction}></Search>\n            <br />\n            <div className=\"row\">\n\n                {pokeArray}\n\n            </div>\n        </div>\n    )\n}\n\nexport default PokemonList;","\nimport React from 'react';\nimport PokemonList from '../pokemon/PokemonList';\n\nfunction Dashboard ()\n{\n\n    return(\n        <PokemonList/>\n    )\n}\n\nexport default Dashboard;","import React from 'react';\nimport logo from './logo.svg';\nimport poke_logo from './giphy.gif';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport NavBar from './components/layout/NavBar.js';\nimport PokemonList from './components/pokemon/PokemonList';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Dashboard from './components/layout/Dashboard';\nimport Pokemon from './components/pokemon/Pokemon';\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar></NavBar>\n        <h3>Pokemon App</h3>\n        <img src={poke_logo} className=\"\" alt=\"logo\" width=\"200px\" style={{paddingBottom:\"30px\", paddingTop:\"30px\"}} />\n        <br />\n        <Switch>\n          <Route exact path=\"/\" component={Dashboard} />\n          {<Route exact path=\"/pokemon/:pokemonIndex\" component={Pokemon} />}\n        </Switch>\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}